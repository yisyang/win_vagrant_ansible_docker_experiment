---
# Ansible Variables

# System / SSH
ssh_user: "scott" # Your ssh admin user into the guest machine
ssh_user_group: "admin" # Your ssh user's group with password-less sudo privileges
ssh_user_reset: false # true to re-provision all user settings (bash, vim, git, etc.)

ssh_user_sshkey: "files/pubkey" # Path to your OpenSSH public key that you would like to add into ~/authorized_keys
#ssh_user_password: "dontneedone"

# System / Web
web_user: "www" # If developing from remote machine, you will be using this user to do sftp
web_user_group: "www"
#web_user_password: "dontneedone"
web_user_sshkey: "{{ ssh_user_sshkey }}"

# System / Git
ssh_user_git_name: "Scott Yang"
ssh_user_git_email: "yisyang@gmail.com"
ssh_user_gitkey: "files/gitkey" # Private key used to connect to github, not password protected, and MUST chmod to 0600
# If defined, the git key will be copied into this destination on the provisioned machines
# SSH config will be modified accordingly to use this key for github.com
# Can be helpful if you plan to use git directly on the provisioned machines
#ssh_user_gitkey_dest: "/home/{{ ssh_user }}/.ssh/gitkey"

# System / Mail
system_mail_user: "vmail"
system_mail_mysql_user: "mailuser"
# By default the same password is used for the OS and for MySQL
system_mail_mysql_user_password: "mailuserpass"
system_mail_mysql_database: "mailserver"
system_mail_default_domain: "domain1.com"

# SSL configs for mail server
#
# The provisioner assumes that the mail server that you are provisioning will have only 1 IP address.
# Although it is possible to put more domains onto 1 IP, dovecot does not very well with SSL on virtual hosts.
#
# If you have trouble connecting to your mail servers through 3rd party apps such as GMail, you can either get a SSL
# for all fully qualified domain names, or to have SSL for a primary domain and connect to every mail account through
# the mail server of the primary domain.
#
# If self_signed is set to true, a private key and self-signed SSL cert will be generated. It will NOT work with GMail.
system_mail_ssl:
#  key:
#    src: 'files/example_ssl.key'
#  cert:
#    src: 'files/example_ssl.cert'
  self_signed: true
  generate_cert_subject: "/C=US/ST=California/L=Los Angeles/O=Example Company/OU=DevOps/CN={{ system_mail_default_domain }}/emailAddress=admin@{{ system_mail_default_domain }}/subjectAltName=DNS.1={{ system_mail_default_domain }},DNS.2=subdomain.domain1.com,DNS.3=domain2.com"

# Mail domain and user configs
system_mail_domains:
  - name: "domain1.com"
    users:
      - email: "you@domain1.com"
        pass: "EXAMPLE_PASSWORD"
      - email: "me@domain1.com"
        pass: "EXAMPLE_PASSWORD"
    aliases:
      - src: "webmaster@domain1.com"
        dest: "you@domain1.com"
      - src: "admin@domain1.com"
        dest: "you@domain1.com"
  - name: "domain2.com"
    users:
      - email: "you@domain2.com"
        pass: "EXAMPLE_PASSWORD"

# MySQL
database_mysql_root_password: "nobodyknowsthepassword"

# App / Git
app_git_repos:
  - repo: "https://github.com/drnic/php-helloworld.git"
#    key_file: "{{ ssh_user_gitkey }}"
    version: "master"
    dest: "/var/www/helloworld/app"
    owner: "{{ web_user }}"
    group: "{{ web_user_group }}"
    update_to_latest: true # Avoiding the key "update" as it causes a conflict with using with_items
    force: true
    link: "/var/{{ ssh_user }}/link_to_helloworld_app"
#  - repo: "git@github.com:yourusername/yourapp.git"
#    key_file: "{{ ssh_user_gitkey }}"
#    version: "master"
#    dest: "/var/www/inifiles"
#    owner: "{{ ssh_user }}"
#    group: "{{ ssh_user_group }}"
#    update_to_latest: yes
#    force: true

# App / Apache2
# If set, config file for this site will be auto-generated at /etc/apache2/sites-available and symlinked to sites-enabled
app_domains:
  - fqdn: "example.com"
    fqdn_alias: "anotherexample.com, alt.example.com"
    ssl_dir: "/var/www/helloworld/ssl"
    app_dir: "/var/www/helloworld/app"
    owner: "{{ web_user }}"
    group: "{{ web_user_group }}"
    ssl:
      key:
#        src: 'files/example_ssl.key'
        dest: "/var/www/helloworld/ssl/ssl_key.key"
      cert:
#        src: 'files/example_ssl.cert'
        dest: "/var/www/helloworld/ssl/ssl_cert.crt"
#      ca:
#        src: 'files/example_ssl.ca.cert'
#        dest: "/var/www/helloworld/ssl/ssl_ca.crt"
      force_ssl: true
      self_signed: true
      generate_cert_subject: "/C=US/ST=California/L=Los Angeles/O=Example Company/OU=DevOps/CN=example.com/emailAddress=admin@example.com/subjectAltName=DNS.1=*.example.com,DNS.2=subdomain.domain1.com,DNS.3=domain2.com"
#      reverse_proxy:
#        dest: "http://localhost:8080/"
#        preserve_host: true