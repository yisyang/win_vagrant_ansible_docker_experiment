---
# File: main.yml
# Type: task
# Part: System/Bootstrap

# Create ssh user group and user
# Ensure only selected users can sudo
- name: Bootstrap | Group | Create ssh user group
  action: group name={{ ssh_user_group }} state=present
  register: new_group
- name: Bootstrap | Group | Protect su by limiting access only to ssh user group.
  action: command dpkg-statoverride --update --force --add root {{ ssh_user_group }} 4750 /bin/su
  when: new_group.changed
- name: Bootstrap | User | Remove ssh user
  user: name={{ ssh_user }} state=absent remove=yes
  when: ssh_user_reset == true
- name: Bootstrap | User | Create ssh user
  user: name={{ ssh_user }} group={{ ssh_user }} shell=/bin/bash state=present
  register: new_user
  when: ssh_user == ssh_user_group
- name: Bootstrap | User | Create ssh user with groups
  user: name={{ ssh_user }} groups={{ ssh_user_group }} append=yes shell=/bin/bash state=present
  register: new_user
  when: ssh_user != ssh_user_group
- name: Bootstrap | User | Ensure the user can execute sudo commands without a password
  copy:
    content: |
      # Keep forwardagent keys
      Defaults        env_keep+=SSH_AUTH_SOCK

      # Allow passwordless sudo
      {{ ssh_user }} ALL=(ALL) NOPASSWD:ALL
    dest: "/etc/sudoers.d/{{ ssh_user }}"
    owner: root
    group: root
    mode: 0440
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Ensure sudoers.d is enabled
  lineinfile: dest=/etc/sudoers state=present backup=yes regexp="^#includedir \/etc\/sudoers\.d" line="#includedir /etc/sudoers.d"
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Set ssh user key
  authorized_key: user={{ ssh_user }} key="{{ lookup('file', ssh_user_sshkey) }}"
  ignore_errors: true
- name: Bootstrap | User | Set ssh user password
  user: name={{ ssh_user }} password={{ ssh_user_password }}
  when: ssh_user_password is defined
  ignore_errors: true

# Transfer ssh user preferences
- name: Bootstrap | User | Bash | Transfer .bashrc
  copy: src={{ ssh_user_bashrc }} dest=/home/{{ ssh_user }}/.bashrc owner={{ ssh_user }} group={{ ssh_user_group }}
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Vim | Transfer .vimrc
  copy: src={{ ssh_user_vimrc }} dest=/home/{{ ssh_user }}/.vimrc owner={{ ssh_user }} group={{ ssh_user_group }}
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Vim | Create dir ~/.vim
  file: dest=/home/{{ ssh_user }}/.vim state=directory owner={{ ssh_user }} group={{ ssh_user_group }}
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Vim | Create dir ~/.vim/colors
  file: dest=/home/{{ ssh_user }}/.vim/colors state=directory owner={{ ssh_user }} group={{ ssh_user_group }}
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Vim | Transfer colorschemes
  copy: src=vim/{{ item }}.vim dest=/home/{{ ssh_user }}/.vim/colors/{{ item }}.vim owner={{ ssh_user }} group={{ ssh_user_group }}
  with_items: vim_colors_to_copy
  when: ssh_user_reset == true or new_user.changed and vim_colors_to_copy is defined
- name: Bootstrap | User | SSH | Set ssh user ssh config
  copy: src={{ ssh_user_sshconfig }} dest=/home/{{ ssh_user }}/.ssh/config owner={{ ssh_user }} group={{ ssh_user_group }}
  when: ssh_user_reset == true or new_user.changed

# Transfer ssh config to use various keys
- name: Bootstrap | User | Git | Set ssh user git config
  template: src=gitconfig.j2 dest=/home/{{ ssh_user }}/.gitconfig owner={{ ssh_user }} group={{ ssh_user_group }} mode=0644 backup=no
  when: ssh_user_reset == true or new_user.changed
- name: Bootstrap | User | Git | Copy ssh user git key
  copy: src={{ ssh_user_gitkey }} dest={{ ssh_user_gitkey_dest }} mode=0600 owner={{ ssh_user }} group={{ ssh_user_group }}
  when: ssh_user_gitkey_dest is defined and ssh_user_gitkey_dest != "" and (ssh_user_reset == true or new_user.changed)

# Create web user and group
- name: Bootstrap | Group | Create web user group
  action: group name={{ web_user_group }} state=present
  register: new_group_web_user
- name: Bootstrap | Group | Protect su by limiting access only to web user group.
  action: command dpkg-statoverride --update --force --add root {{ web_user_group }} 4750 /bin/su
  when: new_group_web_user.changed
- name: Bootstrap | User | Create web user
  user: name={{ web_user }} group={{ web_user }} shell=/bin/bash state=present
  when: web_user == web_user_group
- name: Bootstrap | User | Create web user with groups
  user: name={{ web_user }} groups={{ web_user_group }} append=yes shell=/bin/bash state=present
  when: web_user != web_user_group
- name: Bootstrap | User | Set web user key
  authorized_key: user={{ web_user }} key="{{ lookup('file', web_user_sshkey) }}"
  ignore_errors: true
- name: Bootstrap | User | Set web user password
  user: name={{ web_user }} password={{ web_user_password }}
  when: web_user_password is defined
  ignore_errors: true
