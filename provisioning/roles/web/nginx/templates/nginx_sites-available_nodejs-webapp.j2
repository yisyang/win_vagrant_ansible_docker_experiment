
server {
  listen 80;

  # Listen on the www host
  server_name www.beelinkapp.com;

  # and redirect to the non-www host (declared below)
  return 301 $scheme://beelinkapp.com$request_uri;
}

server {
  listen 80;

  # Listen on the non-https host
  server_name beelinkapp.com;

  # and redirect to the https host (declared below)
  return 301 https://beelinkapp.com$request_uri;
}

upstream beelink_beelinkapp.com {
  server 127.0.0.1:3000;
}

server {

  listen 443 default_server ssl spdy deferred;
  # listen [::]:443 ipv6only=on default_server ssl deferred;

  # The host name to respond to
  server_name beelinkapp.com;

  # HTTPS certificates
  ssl on;
  ssl_certificate      /srv/www/beelinkapp.com/beelink/config/certificates/beelinkapp.com-chained.crt;
  ssl_certificate_key  /srv/www/beelinkapp.com/beelink/config/certificates/beelinkapp.com.key;

  # Path for static files
  root /home/srv/www/beelinkapp.com/beelink/app;

  #Specify a charset
  charset utf-8;

  # Custom 404 page
  #error_page 404 /404.html;

  # Include the component config parts for h5bp
  # include conf/h5bp.conf;

  # Built-in filename-based cache busting
  # https://github.com/h5bp/html5-boilerplate/blob/5370479476dceae7cc3ea105946536d6bc0ee468/.htaccess#L403
  # This will route all requests for /css/style.20120716.css to /css/style.css
  # Read also this: github.com/h5bp/html5-boilerplate/wiki/cachebusting
  # This is not included by default, because it'd be better if you use the build
  # script to manage the file names.
  location ~* (.+)\.(?:\d+)\.(js|css|png|jpg|jpeg|gif|json)$ {
     try_files $uri $1.$2;
  }

  # Expire rules for static content
  #

  # No default expire rule. This config mirrors that of apache as outlined in the
  # html5-boilerplate .htaccess file. However, nginx applies rules by location,
  # the apache rules are defined by type. A concequence of this difference is that
  # if you use no file extension in the url and serve html, with apache you get an
  # expire time of 0s, with nginx you'd get an expire header of one month in the
  # future (if the default expire rule is 1 month). Therefore, do not use a
  # default expire rule with nginx unless your site is completely static

  # cache.appcache, your document html and data
  location ~* \.(?:manifest|appcache|html?|xml|json)$ {
    expires -1;
    access_log /var/log/nginx/static.log;
  }

  # Feed
  location ~* \.(?:rss|atom)$ {
    expires 1h;
    add_header Cache-Control "public";
  }

  # Media: images, icons, video, audio, HTC
  location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
    expires 1M;
    access_log off;
    add_header Cache-Control "public";
  }

  # CSS and Javascript
  location ~* \.(?:css|js)$ {
    expires 1y;
    access_log off;
    add_header Cache-Control "public";
  }

  # Cross domain webfont access
  location ~* \.(?:ttf|ttc|otf|eot|woff|font.css)$ {
    add_header "Access-Control-Allow-Origin" "*";

    # Also, set cache rules for webfonts.
    #
    # See http://wiki.nginx.org/HttpCoreModule#location
    # And https://github.com/h5bp/server-configs/issues/85
    # And https://github.com/h5bp/server-configs/issues/86
    expires 1M;
    access_log off;
    add_header Cache-Control "public";
  }

  # Force the latest IE version
  # Use ChromeFrame if it's installed for a better experience for the poor IE folk
  add_header "X-UA-Compatible" "IE=Edge,chrome=1";

  # Prevent clients from accessing hidden files (starting with a dot)
  # This is particularly important if you store .htpasswd files in the site hierarchy
  location ~* (?:^|/)\. {
    deny all;
  }

  # Prevent clients from accessing to backup/config/source files
  location ~* (?:\.(?:bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
    deny all;
  }

  # Pass the request to the NodeJS server
  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass http://beelink_beelinkapp.com/;
    proxy_redirect off;

    # Handle websocket with nginx (>= 1.3.13)
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

}
