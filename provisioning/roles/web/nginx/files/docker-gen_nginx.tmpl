# https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
#map $http_x_forwarded_proto $proxy_x_forwarded_proto {
#  default $http_x_forwarded_proto;
#  ''      $scheme;
#}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
#map $http_upgrade $proxy_connection {
#  default upgrade;
#  '' close;
#}

#gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream proxy_{{ $host }} {
{{ range $index, $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ with $address := index $container.Addresses 0 }}
       # {{$container.Name}}
       server {{ $address.IP }}:{{ $address.Port }};
    {{ end }}
  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
  {{ else if $container.Env.VIRTUAL_PORT }}
    {{ range $address := .Addresses }}
       {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
       # {{$container.Name}}
       server {{ $address.IP }}:{{ $address.Port }};
       {{ end }}
    {{ end }}
  {{/* Else default to standard web port 80 */}}
  {{ else }}
    {{ range $address := $container.Addresses }}
      {{ if eq $address.Port "80" }}
      # {{$container.Name}}
      server {{ $address.IP }}:{{ $address.Port }};
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

server {

  listen 80;

  # Listen on the www host
  server_name www.{{ $host }};

  # and redirect to the non-www host (declared below)
  return 301 $scheme://{{ $host }}$request_uri;

}

server {

  listen 80;

  # Listen on the non-https host
  server_name {{ $host }};

  # and redirect to the https host (declared below)
  return 301 https://{{ $host }}$request_uri;

}

server {

  listen 443 ssl spdy deferred;
  # listen [::]:443 ipv6only=on default_server ssl deferred;

  # The host name to respond to
  server_name {{ $host }};

  # HTTPS certificates
  ssl on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
  ssl_prefer_server_ciphers on;

  # Optimize SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive SSL handshakes.
  # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
  # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
  # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
  ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
  ssl_session_timeout  24h;

  ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
  ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" $host }};
  {{ end }}

  # Use a higher keepalive timeout to reduce the need for repeated handshakes
  keepalive_timeout 300; # up from 75 secs default

  # Path for static files
  #root /usr/share/nginx/www;

  # Specify a charset
  charset utf-8;

  # Custom 404 page
  #error_page 404 /404.html;

  # Force the latest IE version
  # Use ChromeFrame if it's installed for a better experience for the poor IE folk
  add_header "X-UA-Compatible" "IE=Edge,chrome=1";

  # Prevent clients from accessing hidden files (starting with a dot)
  # This is particularly important if you store .htpasswd files in the site hierarchy
  location ~* (?:^|/)\. {
    deny all;
  }

  # Prevent clients from accessing to backup/config/source files
  location ~* (?:\.(?:bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)|~)$ {
    deny all;
  }

  # Pass the request to the NodeJS server
  location / {
    include /etc/nginx/proxy_params;
    proxy_buffering off;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass http://proxy_{{ $host }};
    proxy_redirect off
    #proxy_redirect http://proxy_{{ $host }} https://{{ $host }};

    # Handle websocket with nginx (>= 1.3.13)
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

}

{{ end }}
